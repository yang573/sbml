fun partition(arr, len) = {
	pivot = arr[0];
	left = [];
	right = [];
	equal = [pivot]; llen = 0;
	rlen = 0;
	elen = 1;

	i = 1;
	while (i < len) {
		if (arr[i] < pivot) {
			left = arr[i]::left;
			llen = llen + 1;
		} else {
			if (arr[i] == pivot) {
				equal = arr[i]::equal;
				elen = elen + 1;
			} else {
				right = arr[i]::right;
				rlen = rlen + 1;
			}
		}
		i = i + 1;
			
	}
} ((left, llen), (equal, elen), (right, rlen));

fun merge(left, llen, equal, elen, right, rlen) = {
	arr = [];

	i = 0;
	while (i < llen) {
		arr = arr + [left[i]];
		i = i + 1;
	}
	i = 0;
	while (i < elen) {
		arr = arr + [equal[i]];
		i = i + 1;
	}
	i = 0;
	while (i < rlen) {
		arr = arr + [right[i]];
		i = i + 1;
	}
} arr;

fun quicksort(arr, len) = {
	ret = [];
	if (len <= 1) {
		i = 0;
		while (i < len) {
			ret = ret + [arr[i]];
			i = i + 1;
		}
	} else {
		partitions = partition(arr, len);
		lefti = #1(partitions);
		equali = #2(partitions);
		righti = #3(partitions);
		left = #1(lefti);
		llen = #2(lefti);
		equal = #1(equali);
		elen = #2(equali);
		right = #1(righti);
		rlen = #2(righti);
		left = quicksort(#1(lefti), #2(lefti));
		right = quicksort(#1(righti), #2(righti));
		ret = merge(left, llen, equal, elen, right, rlen);
	}
} ret;


{
	arr = [5, 3, 1, 6, 7, 453, 32];
	ret = partition(arr, 7);

	i = 0;
	print(quicksort(arr, 7));
}
